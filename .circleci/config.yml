# YAML Anchors
# These anchors can be aliased to prevent config repetition
# For more info see:
# https://medium.com/@kinghuang/docker-compose-anchors-aliases-extensions-a1e4105d70bd

docker_image: &docker_image
  docker:
    - image: circleci/node:12.9.1

docker_cy_image: &docker_cy_image
  docker:
    - image: cypress/base:10
      environment:
        # Enables colors in the output
        TERM: xterm

        # Used to store junit test reports
        # For more info see:
        # https://github.com/cypress-io/cypress-example-docker-circle#generate-just-xml-report
        MOCHA_FILE: reports/cypress/test-report-junit.xml

# Caching
# For more info see:
# https://circleci.com/docs/2.0/caching/#section=projects
#
# Note that the CircleCI cache is immutable and there's not other way to
# invalidate the cache besides using a different key. Therefore it's advised to
# use some sort of version pre- or postfix in the.
#
# For more info see:
# https://circleci.com/docs/2.0/caching/#clearing-cache
restore_deps_cache: &restore_deps_cache
  restore_cache:
    keys:
      - npm-cache-v1-{{ checksum "package-lock.json" }}

restore_build_cache: &restore_build_cache
  restore_cache:
    keys:
      - build-cache-v1-{{ .Revision }}

# Job filters, for more info see:
# https://circleci.com/docs/2.0/workflows/#branch-level-job-execution
all_branches_except_master: &all_branches_except_master
  filters:
    branches:
      ignore: master

only_master: &only_master
  filters:
    branches:
      only: master

version: 2.1
jobs:
  # Uncomment (also add to "workflows"!) when this issue is fixed:
  # https://github.com/upstandfm/website/issues/3
  #
  # audit:
  #   <<: *docker_image
  #   steps:
  #     - checkout
  #     - run:
  #         name: Audit dependencies
  #         command: npm audit

  deps:
    <<: *docker_image
    steps:
      - checkout
      - *restore_deps_cache
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          key: npm-cache-v1-{{ checksum "package-lock.json" }}

          # "node_modules" should not be cached, because they contain compiled
          # binaries, which will cause errors when using different Node versions
          #
          # The ".npm" dir also stores deps, but uncompiled.
          #
          # Additionally, some binaries/executables are stord in ".cache" (like
          # "cypres").
          #
          # For more info see:
          # https://docs.cypress.io/guides/guides/continuous-integration.html#Caching
          paths:
            - ~/.npm
            - ~/.cache

  e2e:
    <<: *docker_cy_image
    steps:
      - checkout
      - *restore_deps_cache
      - run:
          name: Install dependencies
          command: npm ci

      # Verify that Cypress is installed correctly and is executable
      - run:
          name: Verify Cypress installation
          command: |
            $(npm bin)/cypress verify

      # Cypress requires a local server to be running, to be able to run tests
      - run:
          name: Start dev server
          command: npm start
          # CircleCI will kill the server when tests have run
          background: true
      - run:
          name: Run integration/end-to-end tests
          command: |
            $(npm bin)/cypress run --record false --reporter junit --reporter-options "mochaFile=$MOCHA_FILE"

      # CircleCI does not support multiple artifact paths, so they must be
      # stored as separate steps
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots

  e2e-record:
    <<: *docker_cy_image
    steps:
      - checkout
      - *restore_deps_cache
      - run:
          name: Install dependencies
          command: npm ci

      # Verify that Cypress is installed correctly and is executable
      - run:
          name: Verify Cypress installation
          command: |
            $(npm bin)/cypress verify

      # Cypress requires a local server to be running, to be able to run tests
      - run:
          name: Start dev server
          command: npm start
          # CircleCI will kill the server when tests have run
          background: true
      - run:
          name: Run integration/end-to-end tests, and record
          command: |
            $(npm bin)/cypress run --group "All tests" --record --key "$CYPRESS_RECORD_KEY" --reporter junit --reporter-options "mochaFile=$MOCHA_FILE"

      # CircleCI does not support multiple artifact paths, so they must be
      # stored as separate steps
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots

  build:
    <<: *docker_image
    steps:
      - checkout
      - *restore_deps_cache
      - *restore_build_cache
      - run:
          name: Install dependencies
          command: npm ci
      - run:
          name: Build website
          command: npm run build
      - save_cache:
          key: build-cache-v1-{{ .Revision }}
          paths:
            - ./build
      - store_artifacts:
          path: build

  preview:
    <<: *docker_image
    steps:
      - checkout
      - *restore_deps_cache
      - *restore_build_cache
      - run:
          name: Install dependencies
          command: npm ci

      # This exposes: $DEPLOY_MESSAGE
      # See: https://discuss.circleci.com/t/using-environment-variables-in-config-yml-not-working/14237
      - run: echo 'export DEPLOY_MESSAGE="Deployed from CircleCI. See $CIRCLE_BUILD_URL"' >> $BASH_ENV
      - run:
          name: Draft deploy to preview website
          command: |
            $(npm bin)/netlify deploy --message="$DEPLOY_MESSAGE" --site="$NETLIFY_SITE_ID" --dir="$NETLIFY_PUBLISH_DIR" --auth="$NETLIFY_ACCESS_TOKEN"

  release:
    <<: *docker_image
    steps:
      - checkout
      - *restore_deps_cache
      - *restore_build_cache
      - run:
          name: Install dependencies
          command: npm ci

      # This exposes: $DEPLOY_MESSAGE
      # See: https://discuss.circleci.com/t/using-environment-variables-in-config-yml-not-working/14237
      - run: echo 'export DEPLOY_MESSAGE="Deployed from CircleCI. See $CIRCLE_BUILD_URL"' >> $BASH_ENV
      - run:
          name: Release website to prod
          command: |
            $(npm bin)/netlify deploy --prod --message="$DEPLOY_MESSAGE" --site="$NETLIFY_SITE_ID" --dir="$NETLIFY_PUBLISH_DIR" --auth="$NETLIFY_ACCESS_TOKEN"

workflows:
  build_branch:
    jobs:
      # - audit:
      #     <<: *all_branches_except_master
      - deps:
          <<: *all_branches_except_master
          # requires:
          #   - audit
      - e2e:
          requires:
            # - audit
            - deps
      - build:
          <<: *all_branches_except_master
          requires:
            # - audit
            - deps
            - e2e
      - preview:
          <<: *all_branches_except_master
          requires:
            # - audit
            - deps
            - e2e
            - build

  release_master:
    jobs:
      # - audit:
      #     <<: *only_master
      - deps:
          <<: *only_master
          # requires:
          #   - audit
      - e2e-record:
          requires:
            # - audit
            - deps
      - build:
          <<: *only_master
          requires:
            # - audit
            - deps
            - e2e-record
      - release:
          <<: *only_master
          requires:
            # - audit
            - deps
            - e2e-record
            - build
